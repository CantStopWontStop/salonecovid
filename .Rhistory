layout(font = font) %>%
config(displayModeBar = FALSE)
})
}
# server
# Create Shiny object
shinyApp(ui = ui, server = server)
cbsa <- reactive({
c <- cbsaCase[cbsaCase$CBSA == input$cbsaCode,]
c$Date <-c$Date
c$Name <- c$Name.y
c$NAME.y <- c$cbsaName
return(c)
})
cbsa
cbsaCase
cbsaPopRaw<- read_csv("https://www2.census.gov/programs-surveys/popest/datasets/2010-2019/metro/totals/cbsa-est2019-alldata.csv")
cities <- c('New York-Newark-Jersey City, NY-NJ-PA','Dallas-Fort Worth-Arlington, TX','Houston-The Woodlands-Sugar Land, TX','Washington-Arlington-Alexandria, DC-VA-MD-WV','Philadelphia-Camden-Wilmington, PA-NJ-DE-MD','Atlanta-Sandy Springs-Alpharetta, GA','Charlotte-Concord-Gastonia, NC-SC'
)
cbsaPop <- cbsaPopRaw %>%
filter(NAME %in% cities) %>%
mutate(Population = POPESTIMATE2019)%>%
select(CBSA,NAME,Population,STCOU) %>%
arrange(desc(Population))
cbsaCaseRaw <- read_csv('https://usafactsstatic.blob.core.windows.net/public/data/covid-19/covid_confirmed_usafacts.csv')
codes <- cbsaPop$CBSA
counties <- cbsaPopRaw %>%
filter(CBSA %in% codes) %>%
filter( !is.na(STCOU)) %>%
mutate(Population = POPESTIMATE2019)%>%
select(CBSA, STCOU,NAME,Population) %>%
left_join(cbsaPop, by = c("CBSA"='CBSA')) %>%
mutate(FIPS = as.numeric(STCOU.x))
cbsaCase <- counties %>%
left_join(cbsaCaseRaw, by =c("FIPS"="countyFIPS")) %>%
gather(-c(1:11),key ='Date', value = "Cases") %>%
group_by(CBSA, NAME.y, Date) %>%
summarise(Population = sum(Population.x), "Cases" = sum(Cases)) %>%
mutate(Date =mdy(Date))
cbsa <- reactive({
c <- cbsaCase[cbsaCase$CBSA == input$cbsaCode,]
c$Date <-c$Date
c$Name <- c$Name.y
c$NAME.y <- c$cbsaName
return(c)
})
ui <- dashboardPage(skin = "black",
dashboardHeader(title = "Salone Against COVID"),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("News", tabName = "news", icon = icon("newspaper-o")),
menuItem("FAQs", tabName = "question", icon = icon("question-circle-o")),
menuItem("Resources", tabName = "resources", icon = icon("calendar"))
)
),
dashboardBody(
tabItems(
tabItem(tabName = "dashboard",
fluidRow(
box(width= 12, plotlyOutput("salonePlot"))
),
fluidRow(
tabBox(
side = "right", height = "250px",
selected = "Guinea",
tabPanel("Guinea", plotlyOutput("guineaPlot")),
tabPanel("Liberia", plotlyOutput("pepperPlot"))
),
box(
selectInput("cbsaCode", "Metropolitan Area",
c(12060 = "Atlanta",
16740 = "Charlotte",
19100 = "Dallas",
26420 = "Houston",
35620 = "New York / New Jersey",
37980 = "Philadelphia",
47900 = "Washington"
)),
plotlyOutput('cbsaPlot')
#              side = "right", height = "250px",
#             selected = "",
#            tabPanel("Atlanta", plotlyOutput("atlPlot")),
#           tabPanel("", plotlyOutput("queenPlot")),
#          tabPanel(, plotlyOutput("triPlot")),
#         tabPanel("Philadelphia", plotlyOutput("phillyPlot")),
#        tabPanel("Washington D.C. / MD / VA", plotlyOutput("dmvPlot"))
)
)
),
tabItem( tabName = "news",
fluidRow(
h2("Dashboard tab content")
)
),
tabItem(tabName = "question",
fluidRow(
plotlyOutput("plot1")
)
),
tabItem(tabName = "resources",
)
)
)
)
# Define server function
server <- function(input, output) {
WHO_COVID_19_global_data <- read_csv("https://covid19.who.int/WHO-COVID-19-global-data.csv")
# select Salone data
salone <- WHO_COVID_19_global_data %>%
filter(Country == 'Sierra Leone') %>%
filter(Date_reported > ymd(20200331))
pepper <- WHO_COVID_19_global_data %>%
filter(Country == 'Liberia') %>%
filter(Date_reported > ymd(20200331))
guinea <- WHO_COVID_19_global_data %>%
filter(Country == 'Guinea') %>%
filter(Date_reported > ymd(20200331))
font = list(
family = "DM Sans",
size = 15,
color = "white"
)
label = list(
bgcolor = "#232F34",
bordercolor = "transparent",
font = font
)
output$salonePlot <- renderPlotly({
salonePlot <- salone %>%
ggplot(aes(x = Date_reported, y= New_cases, text = paste0("Date: ",Date_reported, "\nCases: ", New_cases))
) +
geom_col() +
labs(
title = "Trend in COVID-19 Cases in Sierra Leone",
x = "Date",
y = "New Cases"
) +
theme_tufte()
salonePlot <-  ggplotly(salonePlot, tooltip=c("text")) %>%
style(hoverlabel = label) %>%
layout(font = font) %>%
config(displayModeBar = FALSE)
})
output$pepperPlot <- renderPlotly({
pepperPlot <- pepper %>%
ggplot(aes(x = Date_reported, y= New_cases, text = paste0("Date: ",Date_reported, "\nCases: ", New_cases))
) +
geom_col() +
labs(
title = "Liberia",
x = "Date",
y = "New Cases"
) +
theme_tufte()
pepperPlot <-  ggplotly(pepperPlot, tooltip=c("text")) %>%
style(hoverlabel = label) %>%
layout(font = font) %>%
config(displayModeBar = FALSE)
})
output$guineaPlot <- renderPlotly({
guineaPlot <- guinea %>%
ggplot(aes(x = Date_reported, y= New_cases, text = paste0("Date: ",Date_reported, "\nCases: ", New_cases))
) +
geom_col() +
labs(
title = "Guinea",
x = "Date",
y = "New Cases"
) +
theme_tufte()
guineaPlot <-  ggplotly(guineaPlot, tooltip=c("text")) %>%
style(hoverlabel = label) %>%
layout(font = font) %>%
config(displayModeBar = FALSE)
})
output$cbsaPlot <- renderPlotly({
key <- cbsa()$code
cbsaPlot <- cbsa()@data %>%
ggplot(aes(x = Date, y= Cases,key = key, text = paste0("Date: ",Date, "\nCases: ", Cases))
) +
geom_col() +
labs(
title = Name.y,
x = "Date",
y = "New Cases"
) +
theme_tufte()
cbsaPlot <-  ggplotly(guineaPlot, tooltip=c("text")) %>%
style(hoverlabel = label) %>%
layout(font = font) %>%
config(displayModeBar = FALSE)
})
}
# Create Shiny object
shinyApp(ui = ui, server = server)
cbsaCase[cbsaCase$CBSA == input$cbsaCode,]
cbsaCase$CBSA
cbsa <- reactive({
c <- cbsaCase[cbsaCase$CBSA == input$cbsaCode, ]
c$Date <-c$Date
c$Name <- c$Name.y
c$NAME.y <- c$cbsaName
return(c)
})
# Create Shiny object
shinyApp(ui = ui, server = server)
saloneMapData <- read_csv('saloneMapData.csv')
View(saloneMapData)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m
install.packages('leaflet')
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m
m <- leaflet(data = saloneMapData) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(~Longitude, ~Latitude, popup="The birthplace of R")
m
m <- leaflet(data = saloneMapData) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(~Longitude, ~Latitude, label =Cases, '\n',Deaths, District)
m
m <- leaflet(data = saloneMapData) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(~Longitude, ~Latitude, label =~Cases, '\n',~Deaths, ~District)
m
m <- leaflet(data = saloneMapData) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(~Longitude, ~Latitude, label = text = paste0(~Cases, '\n',~Deaths, ~District))
m
m <- leaflet(data = saloneMapData) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(~Longitude, ~Latitude, label = text = paste0(~Cases, '\n',~Deaths, ~District) label = text)
m
m <- leaflet(data = saloneMapData) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(~Longitude, ~Latitude, label = text = paste0(~Cases, '\n',~Deaths, ~District), label = text)
m
m <- leaflet(data = saloneMapData) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(~Longitude, ~Latitude, text = paste0(~Cases, '\n',~Deaths, ~District), label = text)
m
m <- leaflet(data = saloneMapData) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(~Longitude, ~Latitude, label = paste0(~Cases, '\n',~Deaths, ~District))
m
m <- leaflet(data = saloneMapData) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(~Longitude, ~Latitude, label = ~Cases)
m
?addProviderTiles
m <- leaflet(data = saloneMapData) %>%
addProviderTiles(Stadia.AlidadeSmoothDark) %>%  # Add default OpenStreetMap map tiles
addMarkers(~Longitude, ~Latitude, label = ~Cases)
m
m <- leaflet(data = saloneMapData) %>%
addProviderTiles(provider = Stadia.AlidadeSmoothDark) %>%  # Add default OpenStreetMap map tiles
addMarkers(~Longitude, ~Latitude, label = ~Cases)
m
m <- leaflet(data = saloneMapData) %>%
addProviderTiles(provider = "Stadia.AlidadeSmoothDark") %>%  # Add default OpenStreetMap map tiles
addMarkers(~Longitude, ~Latitude, label = ~Cases)
m
m <- leaflet(data = saloneMapData) %>%
addProviderTiles(provider = "Thunderforest.Transport") %>%  # Add default OpenStreetMap map tiles
addMarkers(~Longitude, ~Latitude, label = ~Cases)
m
m
m <- leaflet()
m <-  addProviderTiles(m,provider = "Thunderforest.Transport")
m
m <- leaflet()
m <-  addProviderTiles(m,provider = "Stamen.Watercolor") %>%  # Add default OpenStreetMap map tiles
addMarkers(~Longitude, ~Latitude, label = ~Cases)
m
m <- leaflet(saloneMapData) %>%
addProviderTiles(m,provider = "Stamen.Watercolor") %>%  # Add default OpenStreetMap map tiles
addMarkers(~Longitude, ~Latitude, label = ~Cases)
m
m <- leaflet(saloneMapData) %>%
addProviderTiles(m,provider = "Stadia.AlidadeSmoothDark") %>%  # Add default OpenStreetMap map tiles
addMarkers(~Longitude, ~Latitude, label = ~Cases)
m
m <- leaflet(saloneMapData) %>%
addProviderTiles(m,provider = "Jawg.Matrix") %>%  # Add default OpenStreetMap map tiles
addMarkers(~Longitude, ~Latitude, label = ~Cases)
m
m <- leaflet(saloneMapData) %>%
addProviderTiles(m,provider = "CartoDB.DarkMatter") %>%  # Add default OpenStreetMap map tiles
addMarkers(~Longitude, ~Latitude, label = ~Cases)
m
m <- leaflet(saloneMapData) %>%
addProviderTiles(m,provider = "Esri.WorldGrayCanvas") %>%  # Add default OpenStreetMap map tiles
addMarkers(~Longitude, ~Latitude, label = ~Cases)
m
m <- leaflet(saloneMapData) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(~Longitude, ~Latitude, label = ~Cases)
m
rsconnect::setAccountInfo(name='afromation', token='910C3622A3753EF2072BB33447EE1282', secret='becynyS70OR2WB1oAdzhZTY8LUfqARJHpaB8XL4X')
library(rsconnect)
rsconnect::deployApp('saloneAgainstCovid.r')
library(rsconnect)
rsconnect::deployApp('saloneAgainstCovid.R')
library(rsconnect)
rsconnect::deployApp('saloneAgainstCovid.R')
rsconnect::deployApp('saloneAgainstCovid.R')
rsconnect::deployApp(' /Users/soried/Google Drive/Projects/Afromation Full/Afromation/Digital Projects/Salone Against COVID/')
rsconnect::deployApp(' /Users/soried/Google Drive/Projects/Afromation Full/Afromation/Digital Projects/Salone Against COVID')
rsconnect::setAccountInfo(name='afromation', token='910C3622A3753EF2072BB33447EE1282', secret='becynyS70OR2WB1oAdzhZTY8LUfqARJHpaB8XL4X')
install.packages(c('ggplot2', 'shiny'))
library(shiny); runApp('saloneAgainstCovid.R')
library(tidyverse)
library(magrittr)
library(shiny)
library(lubridate)
library(ggthemes)
library(extrafont)
library(leaflet)
library(rgdal)
library(highcharter)
runApp('saloneAgainstCovid.R')
getwd()
deployApp()
runApp()
deployApp()
salone <- WHO_COVID_19_global_data %>%
filter(Country == 'Sierra Leone') %>%
filter(Date_reported > ymd(20200331)) %>%
mutate(Date =ymd(Date_reported))
salonePlot <- hchart(salone, "column", hcaes(x= Date, y=New_cases))%>%
hc_yAxis(
title = list(text = "New Cases"),
max = 100,
opposite = FALSE
) %>%
hc_title(
text = "Trend in COVID-19 Cases in Sierra Leone",
align = "center") %>%
hc_caption(
text = paste0("Data Source: World Health Organization","n/Powered by: Afromation"),
style = list(fontSize = "12px")
)
salonePlot <-  salonePlot %>%
hc_add_theme(hc_theme_bloom())
salonePlot
WHO_COVID_19_global_data <- read_csv("https://covid19.who.int/WHO-COVID-19-global-data.csv")
salone <- WHO_COVID_19_global_data %>%
filter(Country == 'Sierra Leone') %>%
filter(Date_reported > ymd(20200331)) %>%
mutate(Date =ymd(Date_reported))
salonePlot <- hchart(salone, "column", hcaes(x= Date, y=New_cases))%>%
hc_yAxis(
title = list(text = "New Cases"),
max = 100,
opposite = FALSE
) %>%
hc_title(
text = "Trend in COVID-19 Cases in Sierra Leone",
align = "center") %>%
hc_caption(
text = paste0("Data Source: World Health Organization","n/Powered by: Afromation"),
style = list(fontSize = "12px")
)
salonePlot <-  salonePlot %>%
hc_add_theme(hc_theme_bloom())
salonePlot
salone <- WHO_COVID_19_global_data %>%
filter(Country == 'Sierra Leone') %>%
filter(Date_reported > ymd(20200331)) %>%
mutate(Date =ymd(Date_reported))
salonePlot <- hchart(salone, "column", hcaes(x= Date, y=New_cases))%>%
hc_yAxis(
title = list(text = "New Cases"),
max = 100,
opposite = FALSE
) %>%
hc_title(
text = "Trend in COVID-19 Cases in Sierra Leone",
align = "center") %>%
hc_caption(
text = paste0("Data Source: World Health Organization","\nPowered by: Afromation"),
style = list(fontSize = "12px")
)
salonePlot <-  salonePlot %>%
hc_add_theme(hc_theme_bloom())
salonePlot
salone <- WHO_COVID_19_global_data %>%
filter(Country == 'Sierra Leone') %>%
filter(Date_reported > ymd(20200331)) %>%
mutate(Date =ymd(Date_reported))
salonePlot <- hchart(salone, "column", hcaes(x= Date, y=New_cases))%>%
hc_yAxis(
title = list(text = "New Cases"),
max = 100,
opposite = FALSE
) %>%
hc_title(
text = "Trend in COVID-19 Cases in Sierra Leone",
align = "center") %>%
hc_caption(
text = paste0("Data Source: World Health Organization","\n Powered by: Afromation"),
style = list(fontSize = "12px")
)
salonePlot <-  salonePlot %>%
hc_add_theme(hc_theme_bloom())
salonePlot
salone <- WHO_COVID_19_global_data %>%
filter(Country == 'Sierra Leone') %>%
filter(Date_reported > ymd(20200331)) %>%
mutate(Date =ymd(Date_reported))
salonePlot <- hchart(salone, "column", hcaes(x= Date, y=New_cases))%>%
hc_yAxis(
title = list(text = "New Cases"),
max = 100,
opposite = FALSE
) %>%
hc_title(
text = "Trend in COVID-19 Cases in Sierra Leone",
align = "center") %>%
hc_caption(
text = "Data Source: World Health Organization \n Powered by: Afromation",
style = list(fontSize = "12px")
)
salonePlot <-  salonePlot %>%
hc_add_theme(hc_theme_bloom())
salonePlot
salone <- WHO_COVID_19_global_data %>%
filter(Country == 'Sierra Leone') %>%
filter(Date_reported > ymd(20200331)) %>%
mutate(Date =ymd(Date_reported))
salonePlot <- hchart(salone, "column", hcaes(x= Date, y=New_cases))%>%
hc_yAxis(
title = list(text = "New Cases"),
max = 100,
opposite = FALSE
) %>%
hc_title(
text = "Trend in COVID-19 Cases in Sierra Leone",
align = "center") %>%
hc_caption(
text = "Data Source: World Health Organization \n Powered by: Afromation",
style = list(fontSize = "12px")
)
salonePlot <-  salonePlot %>%
hc_add_theme(hc_theme_bloom())
salonePlot
salone <- WHO_COVID_19_global_data %>%
filter(Country == 'Sierra Leone') %>%
filter(Date_reported > ymd(20200331)) %>%
mutate(Date =ymd(Date_reported))
salonePlot <- hchart(salone, "column", hcaes(x= Date, y=New_cases))%>%
hc_yAxis(
title = list(text = "New Cases"),
max = 100,
opposite = FALSE
) %>%
hc_title(
text = "Trend in COVID-19 Cases in Sierra Leone",
align = "center") %>%
hc_caption(
text = "Data Source: World Health Organization <br> Powered by: Afromation",
style = list(fontSize = "12px")
)
salonePlot <-  salonePlot %>%
hc_add_theme(hc_theme_bloom())
salonePlot
salone <- WHO_COVID_19_global_data %>%
filter(Country == 'Sierra Leone') %>%
filter(Date_reported > ymd(20200331)) %>%
mutate(Date =ymd(Date_reported))
salonePlot <- hchart(salone, "column", hcaes(x= Date, y=New_cases))%>%
hc_yAxis(
title = list(text = "New Cases"),
max = 100,
opposite = FALSE
) %>%
hc_title(
text = "Trend in COVID-19 Cases in Sierra Leone",
align = "center") %>%
hc_caption(
text = "Data Source: World Health Organization <br> <span style='text-align:center'>Powered by Afromation</span>",
style = list(fontSize = "12px")
)
salonePlot <-  salonePlot %>%
hc_add_theme(hc_theme_bloom())
salonePlot
salone <- WHO_COVID_19_global_data %>%
filter(Country == 'Sierra Leone') %>%
filter(Date_reported > ymd(20200331)) %>%
mutate(Date =ymd(Date_reported))
salonePlot <- hchart(salone, "column", hcaes(x= Date, y=New_cases))%>%
hc_yAxis(
title = list(text = "New Cases"),
max = 100,
opposite = FALSE
) %>%
hc_title(
text = "Trend in COVID-19 Cases in Sierra Leone",
align = "center") %>%
hc_caption(
text = "Data Source: World Health Organization <br>Powered by Afromation",
style = list(fontSize = "12px")
)
salonePlot <-  salonePlot %>%
hc_add_theme(hc_theme_bloom())
salonePlot
