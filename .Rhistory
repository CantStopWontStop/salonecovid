tabItem(tabName = "Resources",
fluidRow(
plotlyOutput("plot3")
)
)
)
)
)
)
# Create Shiny object
shinyApp(ui = ui, server = server)
ui <- dashboardPage( theme  = shinytheme("cerulean"),
dashboardHeader(title = "Salone Versus COVID"),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("News", tabName = "news", icon = icon("newspaper-o")),
menuItem("FAQs", tabName = "question", icon = icon("question-circle-o")),
menuItem("Resources", tabName = "calendar", icon = icon("calendar"))
)
),
dashboardBody(
tabItems(
tabItem( tabName = "dashboard",
fluidRow(
box(width = 12, plotlyOutput("plot"))
),
fluidRow(
box(width = 12, plotlyOutput("plot1"))
)
),
tabItem( tabName = "news",
fluidRow(
plotlyOutput("plot2")
),
tabItem(tabName = "question",
fluidRow(
plotlyOutput("plot2")
)
),
tabItem(tabName = "Resources",
fluidRow(
plotlyOutput("plot3")
)
)
)
)
)
)
ui <- dashboardPage( theme  = shinytheme("cerulean"),
dashboardHeader(title = "Salone Versus COVID"),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("News", tabName = "news", icon = icon("newspaper-o")),
menuItem("FAQs", tabName = "question", icon = icon("question-circle-o")),
menuItem("Resources", tabName = "calendar", icon = icon("calendar"))
)
),
dashboardBody(
tabItems(
tabItem( tabName = "dashboard",
fluidRow(
box(width = 12, plotlyOutput("plot"))
)
),
tabItem( tabName = "news",
fluidRow(
plotlyOutput("plot2")
),
tabItem(tabName = "question",
fluidRow(
plotlyOutput("plot2")
)
),
tabItem(tabName = "Resources",
fluidRow(
plotlyOutput("plot3")
)
)
)
)
)
)
ui <- dashboardPage(
dashboardHeader(title = "Salone Versus COVID"),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("News", tabName = "news", icon = icon("newspaper-o")),
menuItem("FAQs", tabName = "question", icon = icon("question-circle-o")),
menuItem("Resources", tabName = "calendar", icon = icon("calendar"))
)
),
dashboardBody(
tabItems(
tabItem( tabName = "dashboard",
fluidRow(
box(width = 12, plotlyOutput("plot"))
)
),
tabItem( tabName = "news",
fluidRow(
plotlyOutput("plot2")
),
tabItem(tabName = "question",
fluidRow(
plotlyOutput("plot2")
)
),
tabItem(tabName = "Resources",
fluidRow(
plotlyOutput("plot3")
)
)
)
)
)
)
server <- function(input, output) {
WHO_COVID_19_global_data <- read_csv("https://covid19.who.int/WHO-COVID-19-global-data.csv")
# select Salone data
salone <- WHO_COVID_19_global_data %>%
filter(Country == 'Sierra Leone') %>%
filter(Date_reported > ymd(20200331))
LIB <- WHO_COVID_19_global_data %>%
filter(Country == 'Liberia') %>%
filter(Date_reported > ymd(20200331))
output$plot <- renderPlotly({
salonePlot <- plot_ly(salone, x = ~Date_reported, y =~New_cases,type = "bar", name = "Sierra Leone")
salonePlot %>%
theme_modern_rc() %>%
layout(dragmode = "select") %>%
event_register("plotly_selecting")
salonePlot
})
output$plot1 <- renderPlotly({
libPlot <- plot_ly(LIB, x = ~Date_reported, y =~New_cases,type = "bar", name = "Liberia")
libPlot %>%
layout(dragmode = "select") %>%
event_register("plotly_selecting")
libPlot
})
}
# Create Shiny object
shinyApp(ui = ui, server = server)
ui <- dashboardPage(
dashboardHeader(title = "Salone Versus COVID"),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("News", tabName = "news", icon = icon("newspaper-o")),
menuItem("FAQs", tabName = "question", icon = icon("question-circle-o")),
menuItem("Resources", tabName = "calendar", icon = icon("calendar"))
)
),
dashboardBody(
tabItems(
tabItem( tabName = "dashboard",
fluidRow(
box(width = 12, plotlyOutput("plot"))
)
),
tabItem( tabName = "news",
fluidRow(
plotlyOutput("plot2")
),
tabItem(tabName = "question",
fluidRow(
plotlyOutput("plot2")
)
),
tabItem(tabName = "Resources",
fluidRow(
plotlyOutput("plot3")
)
)
)
)
)
)
server <- function(input, output) {
WHO_COVID_19_global_data <- read_csv("https://covid19.who.int/WHO-COVID-19-global-data.csv")
# select Salone data
salone <- WHO_COVID_19_global_data %>%
filter(Country == 'Sierra Leone') %>%
filter(Date_reported > ymd(20200331))
LIB <- WHO_COVID_19_global_data %>%
filter(Country == 'Liberia') %>%
filter(Date_reported > ymd(20200331))
output$plot <- renderPlotly({
salonePlot <- plot_ly(salone, x = ~Date_reported, y =~New_cases,type = "bar", name = "Sierra Leone")
salonePlot %>%
layout(dragmode = "select") %>%
event_register("plotly_selecting")
salonePlot
})
output$plot1 <- renderPlotly({
libPlot <- plot_ly(LIB, x = ~Date_reported, y =~New_cases,type = "bar", name = "Liberia")
libPlot %>%
layout(dragmode = "select") %>%
event_register("plotly_selecting")
libPlot
})
}
# Create Shiny object
shinyApp(ui = ui, server = server)
ui <- dashboardPage(
dashboardHeader(title = "Salone Versus COVID"),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("News", tabName = "news", icon = icon("newspaper-o")),
menuItem("FAQs", tabName = "question", icon = icon("question-circle-o")),
menuItem("Resources", tabName = "calendar", icon = icon("calendar"))
)
),
dashboardBody(
tabItems(
tabItem( tabName = "dashboard",
fluidRow(
plotlyOutput("plot")
)
),
tabItem( tabName = "news",
fluidRow(
plotlyOutput("plot2")
),
tabItem(tabName = "question",
fluidRow(
plotlyOutput("plot2")
)
),
tabItem(tabName = "Resources",
fluidRow(
plotlyOutput("plot3")
)
)
)
)
)
)
# Define server function
server <- function(input, output) {
WHO_COVID_19_global_data <- read_csv("https://covid19.who.int/WHO-COVID-19-global-data.csv")
# select Salone data
salone <- WHO_COVID_19_global_data %>%
filter(Country == 'Sierra Leone') %>%
filter(Date_reported > ymd(20200331))
LIB <- WHO_COVID_19_global_data %>%
filter(Country == 'Liberia') %>%
filter(Date_reported > ymd(20200331))
output$plot <- renderPlotly({
salonePlot <- plot_ly(salone, x = ~Date_reported, y =~New_cases,type = "bar", name = "Sierra Leone")
salonePlot %>%
theme_modern_rc() %>%
layout(dragmode = "select") %>%
event_register("plotly_selecting")
salonePlot
})
output$plot1 <- renderPlotly({
libPlot <- plot_ly(LIB, x = ~Date_reported, y =~New_cases,type = "bar", name = "Liberia")
libPlot %>%
layout(dragmode = "select") %>%
event_register("plotly_selecting")
libPlot
})
}
# Create Shiny object
shinyApp(ui = ui, server = server)
ui <- dashboardPage(
dashboardHeader(title = "Salone Versus COVID"),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("News", tabName = "news", icon = icon("newspaper-o")),
menuItem("FAQs", tabName = "question", icon = icon("question-circle-o")),
menuItem("Resources", tabName = "calendar", icon = icon("calendar"))
)
),
dashboardBody(
tabItems(
tabItem( tabName = "dashboard",
fluidRow(
plotlyOutput("plot")
)
),
tabItem( tabName = "news",
fluidRow(
plotlyOutput("plot2")
),
tabItem(tabName = "question",
fluidRow(
plotlyOutput("plot2")
)
),
tabItem(tabName = "Resources",
fluidRow(
plotlyOutput("plot3")
)
)
)
)
)
)
# Define server function
server <- function(input, output) {
WHO_COVID_19_global_data <- read_csv("https://covid19.who.int/WHO-COVID-19-global-data.csv")
# select Salone data
salone <- WHO_COVID_19_global_data %>%
filter(Country == 'Sierra Leone') %>%
filter(Date_reported > ymd(20200331))
LIB <- WHO_COVID_19_global_data %>%
filter(Country == 'Liberia') %>%
filter(Date_reported > ymd(20200331))
output$plot <- renderPlotly({
salonePlot <- plot_ly(salone, x = ~Date_reported, y =~New_cases,type = "bar", name = "Sierra Leone")
salonePlot %>%
layout(dragmode = "select") %>%
event_register("plotly_selecting")
salonePlot
})
output$plot1 <- renderPlotly({
libPlot <- plot_ly(LIB, x = ~Date_reported, y =~New_cases,type = "bar", name = "Liberia")
libPlot %>%
layout(dragmode = "select") %>%
event_register("plotly_selecting")
libPlot
})
}
# Create Shiny object
shinyApp(ui = ui, server = server)
# Create Shiny object
shinyApp(ui = ui, server = server)
server <- function(input, output) {
WHO_COVID_19_global_data <- read_csv("https://covid19.who.int/WHO-COVID-19-global-data.csv")
# select Salone data
salone <- WHO_COVID_19_global_data %>%
filter(Country == 'Sierra Leone') %>%
filter(Date_reported > ymd(20200331))
LIB <- WHO_COVID_19_global_data %>%
filter(Country == 'Liberia') %>%
filter(Date_reported > ymd(20200331))
output$plot <- renderPlotly({
salonePlot <- plot_ly(salone, x = ~Date_reported, y =~New_cases,type = "bar", name = "Sierra Leone")
salonePlot %>%
layout(dragmode = "select") %>%
event_register("plotly_selecting")
salonePlot
})
output$plot1 <- renderPlotly({
libPlot <- plot_ly(LIB, x = ~Date_reported, y =~New_cases,type = "bar", name = "Liberia")
libPlot %>%
layout(dragmode = "select") %>%
event_register("plotly_selecting")
libPlot
})
server <- function(input, output) {
WHO_COVID_19_global_data <- read_csv("https://covid19.who.int/WHO-COVID-19-global-data.csv")
# select Salone data
salone <- WHO_COVID_19_global_data %>%
filter(Country == 'Sierra Leone') %>%
filter(Date_reported > ymd(20200331))
LIB <- WHO_COVID_19_global_data %>%
filter(Country == 'Liberia') %>%
filter(Date_reported > ymd(20200331))
output$plot <- renderPlotly({
salonePlot <- plot_ly(salone, x = ~Date_reported, y =~New_cases,type = "bar", name = "Sierra Leone")
salonePlot %>%
layout(dragmode = "select") %>%
event_register("plotly_selecting")
salonePlot
})
output$plot1 <- renderPlotly({
libPlot <- plot_ly(LIB, x = ~Date_reported, y =~New_cases,type = "bar", name = "Liberia")
libPlot %>%
layout(dragmode = "select") %>%
event_register("plotly_selecting")
libPlot
})
}
# Create Shiny object
shinyApp(ui = ui, server = server)
# Create Shiny object
shinyApp(ui = ui, server = server)
server <- function(input, output) {
WHO_COVID_19_global_data <- read_csv("https://covid19.who.int/WHO-COVID-19-global-data.csv")
# select Salone data
salone <- WHO_COVID_19_global_data %>%
filter(Country == 'Sierra Leone') %>%
filter(Date_reported > ymd(20200331))
LIB <- WHO_COVID_19_global_data %>%
filter(Country == 'Liberia') %>%
filter(Date_reported > ymd(20200331))
output$plot <- renderPlotly({
salonePlot <- plot_ly(salone, x = ~Date_reported, y =~New_cases,type = "bar", name = "Sierra Leone")
salonePlot %>%
layout(dragmode = "select") %>%
event_register("plotly_selecting")
salonePlot
})
output$plot1 <- renderPlotly({
libPlot <- plot_ly(LIB, x = ~Date_reported, y =~New_cases,type = "bar", name = "Liberia")
libPlot %>%
layout(dragmode = "select") %>%
event_register("plotly_selecting")
libPlot
})
}
# Create Shiny object
shinyApp(ui = ui, server = server)
ui <- dashboardPage(
dashboardHeader(title = "Salone Versus COVID"),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("News", tabName = "news", icon = icon("newspaper-o")),
menuItem("FAQs", tabName = "question", icon = icon("question-circle-o")),
menuItem("Resources", tabName = "calendar", icon = icon("calendar"))
)
),
dashboardBody(
tabItems(
tabItem( tabName = "dashboard",
fluidRow(
plotlyOutput("plot")
)
),
tabItem( tabName = "news",
fluidRow(
plotlyOutput("plot2")
),
tabItem(tabName = "question",
fluidRow(
plotlyOutput("plot2")
)
),
tabItem(tabName = "Resources",
fluidRow(
plotlyOutput("plot3")
)
)
)
)
)
)
# Create Shiny object
shinyApp(ui = ui, server = server)
View(server)
ui <- dashboardPage(
dashboardHeader(title = "Salone Versus COVID"),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("News", tabName = "news", icon = icon("newspaper-o")),
menuItem("FAQs", tabName = "question", icon = icon("question-circle-o")),
menuItem("Resources", tabName = "calendar", icon = icon("calendar"))
)
),
dashboardBody(
tabItems(
tabItem( tabName = "dashboard",
fluidRow(
plotlyOutput("plot")
)
),
tabItem( tabName = "news",
fluidRow(
plotlyOutput("plot2")
),
tabItem(tabName = "question",
fluidRow(
plotlyOutput("plot2")
)
),
tabItem(tabName = "Resources",
fluidRow(
plotlyOutput("plot3")
)
)
)
)
)
)
# Define server function
server <- function(input, output) {
WHO_COVID_19_global_data <- read_csv("https://covid19.who.int/WHO-COVID-19-global-data.csv")
# select Salone data
salone <- WHO_COVID_19_global_data %>%
filter(Country == 'Sierra Leone') %>%
filter(Date_reported > ymd(20200331))
LIB <- WHO_COVID_19_global_data %>%
filter(Country == 'Liberia') %>%
filter(Date_reported > ymd(20200331))
output$plot <- renderPlotly({
salonePlot <- plot_ly(salone, x = ~Date_reported, y =~New_cases,type = "bar", name = "Sierra Leone")
salonePlot %>%
layout(dragmode = "select") %>%
event_register("plotly_selecting")
salonePlot
})
output$plot1 <- renderPlotly({
libPlot <- plot_ly(LIB, x = ~Date_reported, y =~New_cases,type = "bar", name = "Liberia")
libPlot %>%
layout(dragmode = "select") %>%
event_register("plotly_selecting")
libPlot
})
}
# server
# Create Shiny object
shinyApp(ui = ui, server = server)
